        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using namespace std;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 100%
        3:   12:int Password::count_leading_characters(string phrase){
        3:   13:  int repetition = 1;
        3:   14:  int index = 0;
        4:   15:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
call    3 returned 3
call    4 returned 3
branch  5 taken 1 (fallthrough)
branch  6 taken 2
branch  7 taken 1
branch  8 taken 3 (fallthrough)
        1:   16:    repetition++;
        1:   17:    index++;
        -:   18:  }
        3:   19:  if(phrase.size() == 0){
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   20:    return 0;
        -:   21:  }
        2:   22:  return repetition;
        -:   23:}
        -:   24:
        -:   25:
        -:   26:/*
        -:   27:  receives a string and returns whether it has both at least one upper-case
        -:   28:  letter and at least one lower-case letter
        -:   29:*/
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:   30:bool Password::has_mixed_case(string pass){
        2:   31:  bool has_lower = false;
        2:   32:  bool has_upper = false;
        -:   33:
       20:   34:  for (char ch : pass){
call    0 returned 2
call    1 returned 2
call    2 returned 18
call    3 returned 18
call    4 returned 20
branch  5 taken 18
branch  6 taken 2 (fallthrough)
       18:   35:    if(islower(ch)){
branch  0 taken 15 (fallthrough)
branch  1 taken 3
       15:   36:      has_lower = true;
        -:   37:    }
        3:   38:    else if(isupper(ch)){
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   39:      has_upper = true;
        -:   40:    }
        -:   41:  }
        2:   42:  return has_lower && has_upper;
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -:   43:}
        -:   44:
function _ZN8Password11is_too_longENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   45:bool Password::is_too_long(string pass){
        1:   46:  int MAX_SIZE = 10;
        1:   47:  return pass.size() >= MAX_SIZE;
call    0 returned 1
        -:   48:}
        -:   49:
function _ZN8Password12is_too_shortENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   50:bool Password::is_too_short(string pass){
        1:   51:  int MIN_SIZE = 5;
        1:   52:  return pass.size() < MIN_SIZE;
call    0 returned 1
        -:   53:}
        -:   54:
function _ZN8Password12is_alpha_numENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 94%
        1:   55:bool Password::is_alpha_num(string pass){
        1:   56:  bool has_num = false;
        1:   57:  bool has_alpha = false;
        -:   58:
       10:   59:  for(char ch : pass){
call    0 returned 1
call    1 returned 1
call    2 returned 9
call    3 returned 9
call    4 returned 10
branch  5 taken 9
branch  6 taken 1 (fallthrough)
        9:   60:    if(isdigit(ch)){
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:   61:      has_num = true;
        -:   62:    }
        8:   63:    else if(isalpha(ch)){
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:   64:      has_alpha = true;
        -:   65:    }
        -:   66:  }
       1*:   67:  return has_num && has_alpha;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:   68:}
