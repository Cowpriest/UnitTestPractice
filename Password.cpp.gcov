        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using namespace std;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 100%
        3:   12:int Password::count_leading_characters(string phrase){
        3:   13:  int repetition = 1;
        3:   14:  int index = 0;
        4:   15:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
call    3 returned 3
call    4 returned 3
branch  5 taken 1 (fallthrough)
branch  6 taken 2
branch  7 taken 1
branch  8 taken 3 (fallthrough)
        1:   16:    repetition++;
        1:   17:    index++;
        -:   18:  }
        3:   19:  if(phrase.size() == 0){
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   20:    return 0;
        -:   21:  }
        2:   22:  return repetition;
        -:   23:}
        -:   24:
        -:   25:
        -:   26:/*
        -:   27:  receives a string and returns whether it has both at least one upper-case
        -:   28:  letter and at least one lower-case letter
        -:   29:*/
        -:   30:// bool Password::has_mixed_case(string pass){
        -:   31://   bool has_lower = false;
        -:   32://   bool has_upper = false;
        -:   33:
        -:   34://   for (char ch : pass){
        -:   35://     if(islower(ch)){
        -:   36://       has_lower = true;
        -:   37://     }
        -:   38://     else if(isupper(ch)){
        -:   39://       has_upper = true;
        -:   40://     }
        -:   41://   }
        -:   42://   return has_lower && has_upper;
        -:   43:// }
        -:   44:
        -:   45:// Implementation A
        -:   46:// #include <cctype>
        -:   47:// bool Password::has_mixed_case(string str)
        -:   48:// {
        -:   49://   bool has_lower = false;
        -:   50://   bool has_upper = false;
        -:   51://   for (char ch : str)
        -:   52://   {
        -:   53://     if (std::islower(ch))
        -:   54://     {
        -:   55://       has_lower = true;
        -:   56://     }
        -:   57://     else if (std::isupper(ch))
        -:   58://     {
        -:   59://       has_upper = true;
        -:   60://     }
        -:   61://   }
        -:   62://   return has_lower && has_upper;
        -:   63:// }
        -:   64:
        -:   65:// Implementation B
        -:   66:// bool Password::has_mixed_case(string str)
        -:   67:// {
        -:   68://   int count_lower = 0;
        -:   69://   for (int i = 0; i < str.length(); i++)
        -:   70://   {
        -:   71://     if (str[i] >= 'a' && str[i] <= 'z')
        -:   72://     {
        -:   73://       count_lower++;
        -:   74://     }
        -:   75://   }
        -:   76://   return count_lower > 0 && count_lower < str.length();
        -:   77:// }
        -:   78:
        -:   79://implementation C
        -:   80:// bool Password::has_mixed_case(string str)
        -:   81:// {
        -:   82://   bool lower = false;
        -:   83://   bool upper = false;
        -:   84://   for (int i = 0; i < str.length(); i++)
        -:   85://   {
        -:   86://     if (str[i] >= 'a' && str[i] <= 'z')
        -:   87://     {
        -:   88://       lower = true;
        -:   89://     }
        -:   90://     else if (str[i] >= 'A' && str[i] <= 'Z')
        -:   91://     {
        -:   92://       upper = true;
        -:   93://     }
        -:   94://   }
        -:   95://   return upper && lower;
        -:   96:// }
        -:   97:
        -:   98:// Implementation D
        -:   99:#include <cctype>
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 93%
        2:  100:bool Password::has_mixed_case(string str)
        -:  101:{
        2:  102:  bool is_lower = false;
        2:  103:  bool is_upper = false;
       20:  104:  for (char c : str)
call    0 returned 2
call    1 returned 2
call    2 returned 18
call    3 returned 18
call    4 returned 20
branch  5 taken 18
branch  6 taken 2 (fallthrough)
        -:  105:  {
       18:  106:    if (std::islower(c))
branch  0 taken 15 (fallthrough)
branch  1 taken 3
        -:  107:    {
       15:  108:      is_lower = true;
        -:  109:    }
        -:  110:    else
        -:  111:    {
        3:  112:      is_upper = true;
        -:  113:    }
        -:  114:  }
       2*:  115:  return is_lower && is_upper;
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -:  116:}
        -:  117:
function _ZN8Password11is_too_longENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  118:bool Password::is_too_long(string pass){
        1:  119:  int MAX_SIZE = 10;
        1:  120:  return pass.size() >= MAX_SIZE;
call    0 returned 1
        -:  121:}
        -:  122:
function _ZN8Password12is_too_shortENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  123:bool Password::is_too_short(string pass){
        1:  124:  int MIN_SIZE = 5;
        1:  125:  return pass.size() < MIN_SIZE;
call    0 returned 1
        -:  126:}
        -:  127:
function _ZN8Password12is_alpha_numENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 94%
        1:  128:bool Password::is_alpha_num(string pass){
        1:  129:  bool has_num = false;
        1:  130:  bool has_alpha = false;
        -:  131:
       10:  132:  for(char ch : pass){
call    0 returned 1
call    1 returned 1
call    2 returned 9
call    3 returned 9
call    4 returned 10
branch  5 taken 9
branch  6 taken 1 (fallthrough)
        9:  133:    if(isdigit(ch)){
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        1:  134:      has_num = true;
        -:  135:    }
        8:  136:    else if(isalpha(ch)){
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:  137:      has_alpha = true;
        -:  138:    }
        -:  139:  }
       1*:  140:  return has_num && has_alpha;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  141:}
